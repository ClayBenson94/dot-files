#!/bin/bash

# If clear exists, use it before we populate the screen with install messages
if which clear &> /dev/null
then
    clear
fi

# Give the user 5 seconds to cancel
echo "Preparing to install, cancel within 5 seconds via ctrl+c, or wait until the script finishes."
sleep 5

# get script info
if [ $(uname) = "Darwin" ]
then
    SELF=$(cd $(dirname "$0") && pwd -P)/$(basename "$0")
else
    SELF=$(readlink -f "$0")
fi
SELF_PATH=$(dirname "$SELF")

# define log file
LOG_FILE="${SELF}.log"
# another example for testing:
# LOG_FILE="/dev/stdout"

# define downloads & tmp file paths
DOWNLOADS="$SELF_PATH/downloads"
TMP_FILES="$DOWNLOADS/tmp"

# check for wget or curl to download all files
if which curl &> /dev/null
then
    DL_CMD="curl -L -o"
elif which wget &> /dev/null
then
    DL_CMD="wget -O"
    echo "curl package recommended..." >> "$LOG_FILE" 2>&1
fi

# create dependent folders
mkdir -p "$DOWNLOADS/.vim/undo" >> "$LOG_FILE" 2>&1
mkdir -p "$DOWNLOADS/.vim/colors" >> "$LOG_FILE" 2>&1
mkdir -p "$TMP_FILES" >> "$LOG_FILE" 2>&1

# check for git
if which git &> /dev/null
then

    # echo status
    echo "cloning vim plugin repositories..."

    # check for src/
    if [ ! -d "$SELF_PATH/src/" ]
    then

        # clone our own repo to grab the files
        git clone "https://github.com/cdelorme/dot-files" "$TMP_FILES/dot-files" >> "$LOG_FILE" 2>&1
    fi

    # clone all repositories
    git clone "https://github.com/tpope/vim-vividchalk" "$TMP_FILES/vividchalk" >> "$LOG_FILE" 2>&1
    git clone "https://github.com/tangphillip/SunburstVIM.git" "$TMP_FILES/sunburst" >> "$LOG_FILE" 2>&1
    git clone "https://github.com/tristen/vim-sparkup" "$TMP_FILES/sparkup" >> "$LOG_FILE" 2>&1
    git clone "https://github.com/Lokaltog/vim-easymotion" "$TMP_FILES/easymotion" >> "$LOG_FILE" 2>&1
    git clone "https://github.com/tpope/vim-surround" "$TMP_FILES/surround" >> "$LOG_FILE" 2>&1
    git clone "https://github.com/kien/ctrlp.vim" "$TMP_FILES/ctrlp" >> "$LOG_FILE" 2>&1
    git clone "https://github.com/mattn/emmet-vim.git" "$TMP_FILES/emmet" >> "$LOG_FILE" 2>&1
elif [ -n "$DL_CMD" ]
then

    # echo status
    echo "downloading vim plugins..."

    # download colorschemes directly
    $DL_CMD "$DOWNLOADS/.vim/colors/vividchalk.vim" "https://raw.github.com/tpope/vim-vividchalk/master/colors/vividchalk.vim" >> "$LOG_FILE" 2>&1
    $DL_CMD "$DOWNLOADS/.vim/colors/sunburst.vim" "https://raw2.github.com/tangphillip/SunburstVIM/master/colors/sunburst.vim" >> "$LOG_FILE" 2>&1

    if which unzip &> /dev/null
    then

        # download the zipped packages
        $DL_CMD "$TMP_FILES/sparkup.zip" "https://github.com/tristen/vim-sparkup/archive/master.zip" >> "$LOG_FILE" 2>&1
        $DL_CMD "$TMP_FILES/easymotion.zip" "https://github.com/Lokaltog/vim-easymotion/archive/master.zip" >> "$LOG_FILE" 2>&1
        $DL_CMD "$TMP_FILES/surround.zip" "https://github.com/tpope/vim-surround/archive/master.zip" >> "$LOG_FILE" 2>&1
        $DL_CMD "$TMP_FILES/ctrlp.zip" "https://github.com/kien/ctrlp.vim/archive/master.zip" >> "$LOG_FILE" 2>&1
        $DL_CMD "$TMP_FILES/emmet.zip" "https://github.com/tangphillip/SunburstVIM/archive/master.zip" >> "$LOG_FILE" 2>&1

        # download our own repo if no src/
        if [ ! -d "$SELF_PATH/src/" ]
        then
            $DL_CMD "$TMP_FILES/dot-files.zip" "https://github.com/cdelorme/dot-files/archive/master.zip" >> "$LOG_FILE" 2>&1
        fi

        # user feedback
        echo "decompressing packages..."

        # decompress packages and delete the zips
        for ZIP in "$TMP_FILES/"*.zip
        do
            unzip -q -o -d "${TMP_FILES}" "${ZIP}" >> "$LOG_FILE" 2>&1
            rm -rf $ZIP >> "$LOG_FILE" 2>&1
        done
    else
        echo "unzip required to install compressed contents..." >> "$LOG_FILE" 2>&1
    fi
fi

# iterate all files in $TMP_FILES
for TMP_PATH in $TMP_FILES/*
do

    # Get a count of items
    CONTENTS=($TMP_PATH/*)

    # if not git, and only one item append to TMP_PATH to dig deeper
    if [ ! -d $TMP_PATH/.git ] && [ ${#CONTENTS[*]} -eq 1 ] && [ -d "$CONTENTS" ]
    then
        TMP_PATH="$TMP_PATH/$CONTENTS"
    fi

    # look for src directory
    if [ -d "$TMP_PATH/src" ]
    then

        # copy contents to downloads
        shopt -s dotglob
        cp -R "$TMP_PATH/src/"* "$DOWNLOADS" >> "$LOG_FILE" 2>&1
        shopt -u dotglob
    else

        # iterate the contents
        for TMP_DIR in "$TMP_PATH/"*
        do

            # delete anything that is not a directory (readmes etc)
            if [ ! -d "$TMP_DIR" ]
            then
                rm -rf "$TMP_DIR"
            fi
        done

        # merge directories recursively with $DOWNLOADS/.vim/
        cp -Rf "$TMP_PATH/"* "$DOWNLOADS/.vim/" >> "$LOG_FILE" 2>&1
    fi
done

# remove TMP_FILES path
rm -rf $TMP_FILES >> "$LOG_FILE" 2>&1

# check for manual downloads (easier this way)
if [ -n "$DL_CMD" ]
then
    $DL_CMD "$DOWNLOADS/.git-completion" "https://raw2.github.com/git/git/master/contrib/completion/git-completion.bash" >> "$LOG_FILE" 2>&1
    $DL_CMD "$DOWNLOADS/.githelpers" "https://raw2.github.com/garybernhardt/dotfiles/master/.githelpers" >> "$LOG_FILE" 2>&1
fi

# if /src exists copy it to downloads else begin downloading the files from github
if [ -d "$SELF_PATH/src/" ]
then
    shopt -s dotglob
    cp -R "$SELF_PATH/src/"* "$DOWNLOADS" >> "$LOG_FILE" 2>&1
    shopt -u dotglob
fi

if [ -d "$DOWNLOADS/.ssh" ]
then

    # Assume first argument was username and attempt to grab public keys from github account
    if [ -n "$DL_CMD" ] && [ -n "$1" ]
    then
        $DL_CMD "$DOWNLOADS/.ssh/authorized_keys" "https://github.com/${1}.keys"
    fi

    # set 0700 on $HOME/.ssh so we can access its contents
    chmod 0700 "$DOWNLOADS/.ssh" >> "$LOG_FILE" 2>&1

    # set 0600 on the contents for ssh "strict-mode" compatibility
    chmod 0600 "$DOWNLOADS/.ssh/"* >> "$LOG_FILE" 2>&1
fi

# echo Status
echo "installing dot files..."

# install the files to home
shopt -s dotglob
cp -Rf "$DOWNLOADS/"* "$HOME"
shopt -u dotglob

# also try to install them to /etc/skel if the path exists & adjust .ssh permissions
if [ -d "/etc/skel" ]
then
    shopt -s dotglob
    cp -Rf "$DOWNLOADS/"* "/etc/skel" >> "$LOG_FILE" 2>&1
    shopt -u dotglob
fi

# OS X uses $HOME/.profile not $HOME/.bashrc, so we want to add a line to tell it to load $HOME/.bashrc (but only once)
if [ $(uname) = "Darwin" ] && ! grep ".bashrc" "$HOME/.profile" &> /dev/null
then
    echo -ne '\n\nif [ -f "$HOME/.bashrc" ]\nthen\n\t. $HOME/.bashrc\nfi\n' >> "$HOME/.profile"
fi

# final status message
echo "dot files are installed."
